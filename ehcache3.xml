<!--<config-->
<!--        xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'-->
<!--        xmlns='http://www.ehcache.org/v3'-->
<!--        xsi:schemaLocation="http://www.ehcache.org/v3 http://www.ehcache.org/schema/ehcache-core.xsd">-->
<!--    &lt;!&ndash; 持久化路径 &ndash;&gt;-->
<!--    <persistence directory="/opt/wacos/server/data/antitamperserver"/>-->

<!--    &lt;!&ndash; 缓存模版,此处为了显示其用法,也可以不用模版直接在cache中配置与模版参数相同 &ndash;&gt;-->
<!--    <cache-template name="template">-->
<!--        <key-type>java.lang.String</key-type>-->
<!--        <value-type>java.lang.String</value-type>-->
<!--        <resources>-->
<!--            &lt;!&ndash; 单位默认为entries当用entries作单位时,可以不填&ndash;&gt;-->
<!--            <heap>1</heap>-->
<!--            <offheap unit="MB">1</offheap>-->
<!--            &lt;!&ndash; persistent 默认为false可以不填&ndash;&gt;-->
<!--            <disk unit="MB">200</disk>-->
<!--        </resources>-->
<!--    </cache-template>-->

<!--    &lt;!&ndash; 缓存对象,如果使用了模版会覆盖模版中的内容,使用uses-template=""来引用模版 &ndash;&gt;-->
<!--    <cache alias="md5cache" uses-template="template">-->
<!--        <key-type>java.lang.String</key-type>-->
<!--        <value-type>java.lang.String</value-type>-->
<!--        <-->
<!--    </cache>-->

<!--</config>-->

<ehcache:config
        xmlns:ehcache="http://www.ehcache.org/v3"
        xmlns:jcache="http://www.ehcache.org/v3/jsr107">

    <!--
      OPTIONAL
       services to be managed and lifecycled by the CacheManager
    -->
<!--    <ehcache:service>-->
<!--        &lt;!&ndash;-->
<!--          One element in another namespace, using our JSR-107 extension as an example here-->
<!--        &ndash;&gt;-->
<!--        <jcache:defaults>-->
<!--            <jcache:cache name="invoices" template="myDefaultTemplate"/>-->
<!--        </jcache:defaults>-->
<!--    </ehcache:service>-->

    <!--
      OPTIONAL
        A <cache> element defines a cache, identified by the mandatory 'alias' attribute, to be managed by the CacheManager
    -->
    <ehcache:cache alias="helloCache">

        <!--
          OPTIONAL, defaults to java.lang.Object
            The FQCN of the type of keys K we'll use with the Cache<K, V>
        -->
<!--        <ehcache:key-type copier="org.ehcache.impl.copy.SerializingCopier">org.springframework.cache.interceptor.SimpleKey</ehcache:key-type>-->

        <!--
          OPTIONAL, defaults to java.lang.Object
            The FQCN of the type of values V we'll use with the Cache<K, V>
        -->
        <ehcache:value-type copier="org.ehcache.impl.copy.SerializingCopier">java.lang.String</ehcache:value-type>

        <!--
          OPTIONAL, defaults to no expiry
            Entries to the Cache can be made to expire after a given time
        -->
        <ehcache:expiry>
            <!--
              time to idle, the maximum time for an entry to remain untouched
                Entries to the Cache can be made to expire after a given time
                other options are:
                   * <ttl>, time to live;
                   * <class>, for a custom Expiry implementation; or
                   * <none>, for no expiry
            -->
<!--            <ehcache:tti unit="minutes">2</ehcache:tti>-->
            <ehcache:none/>
        </ehcache:expiry>

        <!--
          OPTIONAL, defaults to no advice
            An eviction advisor, which lets you control what entries should only get evicted as last resort
            FQCN of a org.ehcache.config.EvictionAdvisor implementation
        -->
<!--        <ehcache:eviction-advisor>com.pany.ehcache.MyEvictionAdvisor</ehcache:eviction-advisor>-->

        <!--
          OPTIONAL,
            Let's you configure your cache as a "cache-through",
            i.e. a Cache that uses a CacheLoaderWriter to load on misses, and write on mutative operations.
        -->
<!--        <ehcache:loader-writer>-->
<!--            &lt;!&ndash;-->
<!--                The FQCN implementing org.ehcache.spi.loaderwriter.CacheLoaderWriter-->
<!--            &ndash;&gt;-->
<!--            <ehcache:class>com.pany.ehcache.integration.ProductCacheLoaderWriter</ehcache:class>-->
<!--            &lt;!&ndash; Any further elements in another namespace &ndash;&gt;-->
<!--        </ehcache:loader-writer>-->

        <!--
            The maximal number of entries to be held in the Cache, prior to eviction starting
        -->
        <ehcache:heap unit="entries">200</ehcache:heap>

        <!--
           OPTIONAL
            Any further elements in another namespace
        -->
    </ehcache:cache>

    <!--
      OPTIONAL
        A <cache-template> defines a named template that can be used be <cache> definitions in this same file
        They have all the same property as the <cache> elements above
    -->
    <ehcache:cache-template name="myDefaultTemplate">
        <ehcache:expiry>
            <ehcache:none/>
        </ehcache:expiry>
        <!--
           OPTIONAL
            Any further elements in another namespace
        -->
    </ehcache:cache-template>

    <!--
      A <cache> that uses the template above by referencing the cache-template's name in the uses-template attribute:
    -->
<!--    <ehcache:cache alias="customerCache" uses-template="myDefaultTemplate">-->
<!--        &lt;!&ndash;-->
<!--          Adds the key and value type configuration-->
<!--        &ndash;&gt;-->
<!--        <ehcache:key-type>java.lang.Long</ehcache:key-type>-->
<!--        <ehcache:value-type>com.pany.domain.Customer</ehcache:value-type>-->

<!--        &lt;!&ndash;-->
<!--          Overwrites the capacity limit set by the template to a new value-->
<!--        &ndash;&gt;-->
<!--        <ehcache:heap unit="entries">200</ehcache:heap>-->
<!--    </ehcache:cache>-->

</ehcache:config>
